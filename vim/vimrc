if v:version < 700
    set runtimepath=$VIMRUNTIME
    finish
endif

" If we're running fish, set the shell to /bin/sh for vim
if $SHELL =~ 'bin/fish'
    set shell=/bin/sh
endif

" set the system type 
source $HOME/.vim/set_system_type.vim

" Defined the loadded variables for miniBufferExplorer and bufexplorer. Thus we will disable it.
let g:loaded_minibufexplorer = 1
let g:loaded_bufexplorer = 1

" Update the runtimepath
set runtimepath=$HOME/.vim,$HOME/.vim/vim_local,$VIMRUNTIME

" source vim_local's vimrc
source $HOME/.vim/vim_local/vimrc

" Allow edit buffers to be hidden
set hidden

" Use the cool tab complete menu
set wildmenu
"set wildmode=list:longest,full
set wildignore=*.o,*~,*.bak

" set tags
set tags=tags;/
set tags+=$HOME/.vim/tags/python.ctags
set tags+=$HOME/workspace/tags

" bind ctrl+space for omnicompletion
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
			\ "\<lt>C-n>" :
			\ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
			\ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
			\ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>


" tweaks ( from http://blog.sontek.net/2008/05/11/python-with-a-modular-ide-vim/ )
"map <silent><C-Left> <C-T>
"map <silent><C-Right> <C-]>

" set Minimal height of a windows
set winminheight=1
" set Minimal number of lines for the current window
set winheight=1000

autocmd BufEnter * cd %:p:h

" Procmail
au BufNewFile,BufRead ~/.procmail/*,~/.procmailrc	setf procmail

" load fish syntax file
au! Syntax newlang                              source $VIM/syntax/fish.vim
"  for fish filetype
au BufRead,BufNewFile *.fish,*.fishrc           set filetype=fish

" fix tab issues with make
au FileType make                                setlocal noexpandtab

" for procmail filetype
au BufNewFile,BufRead ~/.procmail/*,~/.procmailrc   setf procmail

" for java filetype
au BufRead,BufNewFile *.java        source $HOME/.vim/vim_local/plugin/closetag.vim
au BufRead,BufNewFile *.jsp         source $HOME/.vim/vim_local/plugin/closetag.vim
au BufRead,BufNewFile *.java        source $HOME/.vim/ftplugin/java.vim

" for python
autocmd FileType python set omnifunc=pythoncomplete#Complete
"au BufRead,BufNewFile *.py            source $HOME/.vim/after/ftplugin/ipy.vim


" Search options: incremental search, do clever case things, highlight
set nohlsearch
set noignorecase

" No annoying error noises
set noerrorbells
set visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

if MySys() == "mac"
  set guifont=Monaco:h12
elseif MySys() == "unix"
  set guifont=Bitstream\ Vera\ Sans\ Mono\ 11 
elseif MySys() == "windows"
  set gfn=Bitstream_Vera_Sans_Mono:h12:cANSI
endif

if has("gui_running")
   colorscheme autumnleaf
  " colorscheme pyte
  " Enable Toolbar
  set guioptions+=T
  " Enable tab pages
  set guioptions+=e
  " Disable tear-off menus
  set guioptions-=t
else
  "colorscheme zellner
  colorscheme pyte
endif

" set lazyredraw

"The commandbar is 2 high
set cmdheight=2

" fix backspace issue when $TERM=linux or $TERM=putty
" For some reason for this $TERM the backspace and delete keys are screwed
" so we are going to manual set the keycode values for vim.
if &term == "linux" || &term == "putty" || &term == "xterm"
  set t_kb=
  set t_kD=[3~
endif


" Enable a nice big viminfo file
set viminfo='1000,f1,:1000,/1000
set history=5000

" Make backspace delete lots of things
set backspace=indent,eol,start

" Window title
if has('title')
    set titlestring=%t%(\ [%R%M]%)
endif

if has("statusline")
    " clear current statusline
    " set stausline
    " set statusline="%f %y%([%R%M]%)%{'!'[&ff=='".&ff."']}%{'$'[!&list]} (%{synIDattr(synID(line('.'),col('.'),0),'name')})%=#%n %l/%L,%c%V "!
endif

" lines, cols in status line
set ruler

" current mode in status line
set showmode

" By default, go for an indent of 4
set tabstop=8
set shiftwidth=4
set softtabstop=4

" Set print/hardcopy optoin
set printoptions=paper:letter,duplex:off


" set list listchars=tab:Â»Â·,trail:Â·
"
" Do clever indent things. Don't make a # force column zero.
set autoindent
set smartindent

" Enable folds
set foldmethod=indent
set foldcolumn=2
set foldminlines=4


" turn off line number
" set nonumber

"-----------------------------------------------
"		Key Bindings
"-----------------------------------------------

" backspace in Visual mode deletes selection
"vnoremap <BS> d

" Use CTRL-T for opening new tabs

" New Tab
noremap	    <silent><F1>	:tabnew<CR>
vnoremap    <silent><F1>	<C-C>:tabnew<CR>
inoremap    <silent><F1>	<C-O>:tabnew<CR>

" New Tab
noremap	    <silent><F2>	:tabn<CR>
vnoremap    <silent><F2>	<C-C>:tabn<CR>
inoremap    <silent><F2>	<C-O>:tabn<CR>

" Previous Tab
noremap	    <silent><F3>	:tabp<CR>
vnoremap    <silent><F3>	<C-C>:tabp<CR>
inoremap    <silent><F3>	<C-O>:tabp<CR>

" Close Tab
noremap	    <silent><F4>	:tabc<CR>
vnoremap    <silent><F4>	<C-C>:tabc<CR>
inoremap    <silent><F4>	<C-O>:tabc<CR>

" enable/disable spell-checking
"noremap    <silent><F5>	:set spell!<CR>
"inoremap   <silent><F5>	<c-o>:set spell!<CR>

" To Previous Error
noremap	    <silent><F6>	[s
inoremap    <silent><F6>	<c-o>[s

" To Next Error
noremap	    <silent><F7>	]s
inoremap    <silent><F7>	<c-o>]s

" Suggest Corrections
noremap	    <silent><F8>	z=
inoremap    <silent><F8>	<c-o>z=

" Insert Completion Popup Menu				*ins-completion-menu*
noremap	    <silent><F9>	<C-N><C-P>
inoremap    <silent><F9>	<C-n><C-p>

" call Perl_syntax_check
noremap	    <silent><F10>	:call Perl_syntax_check()<cr>
inoremap    <silent><F10>	<c-o>:call Perl_syntax_check()<cr>

" Run CRMS_syntax_check
"noremap	    <silent><F11>	:call CRMS_syntax_check()<cr>
"inoremap    <silent><F11>	<c-o>:call CRMS_syntax_check()<cr>

" ant for CRMS
"noremap	    <silent><F12>	:Ant EAR<cr>
nnoremap    <silent><C-L>       :TlistToggle<CR>


"
" %s/\~\/vim_local/\$HOME\/.vim\/vim_local/g
"  %s/\~\/vim_local/$HOME\/.vim\/vim_local/g
"
"
