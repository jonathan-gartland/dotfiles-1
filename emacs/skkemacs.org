#+Title: skkemacs
#+Author: skk

* Options                                                  :noexport:ARCHIVE:
#+OPTIONS: todo:t html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/style.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/steckemacs.css" />
#+INFOJS_OPT: view:showall toc:t ftoc:t mouse:#555555 path:./js/org-info.js

#+BEGIN_SRC emacs-lisp :tangle no :results silent
(org-babel-tangle-file "skkemacs.org" "skkemacs.el" "emacs-lisp")
#+END_SRC
* init
#+BEGIN_SRC emacs-lisp
(setq is-mac (equal system-type 'darwin))
(setq is-linux (equal system-type 'gnu/linux))
(setq is-windows-nt (equal system-type 'windows-nt))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Install packages cider and clojure-mode manually from
; melpa-stable to ensure version match between cider and cider-nrepl.
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
(package-refresh-contents)
(package-initialize)

(unless (package-installed-p 'cider)
  (package-install 'cider))

(unless (package-installed-p 'clojure-mode)
  (package-install 'clojure-mode))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'cask (expand-file-name "~/.cask/cask.el"))
(cask-initialize)
(require 'pallet)

; common lisp goodies
(require 'cl)

; load use-package
(require 'use-package)

; set custom-file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

(add-hook 'after-init-hook (lambda ()
                             (setq initial-scratch-message
                                   (message "Startup time: %s" (emacs-init-time)))))
#+END_SRC

* 00-default-dirs-and-files
#+BEGIN_SRC emacs-lisp
;; TODO move lisp/00-default-dirs-and-files.el (or 02-settings.el ?)
(defconst emacs-persistence-directory (expand-file-name ".persistence" user-emacs-directory))
(defconst user-backup-dir (expand-file-name "backup" emacs-persistence-directory))
(defconst user-image-dired-dir (expand-file-name "image-dired" emacs-persistence-directory))

(defconst user-save-place-file (expand-file-name "places" emacs-persistence-directory))
(defconst emacs-autosavelistfileprefix-dir (expand-file-name "auto-save-list" emacs-persistence-directory))
(defconst emacs-tramp-dir (expand-file-name "tramp" emacs-persistence-directory))
(defconst emacs-ido-last-file (expand-file-name "ido-last" emacs-persistence-directory))
(defconst emacs-savehist-file (expand-file-name "savehist" emacs-persistence-directory))
(defconst emacs-recentfiles-file (expand-file-name "recent-files" emacs-persistence-directory))
(defconst emacs-smexsavefile-file (expand-file-name "smex-items" emacs-persistence-directory))

(defconst emacs-acomphistfile-file (expand-file-name "ac-comphist.dat" emacs-persistence-directory))
(defconst emacs-autocompletedict (expand-file-name "ac-dict" emacs-persistence-directory))
(defconst emacs-abbrevdefs-file (expand-file-name "abbrev_defs.el" emacs-persistence-directory))

(defconst user-projectile-cache-file (expand-file-name "projectile.cache" emacs-persistence-directory))
(defconst user-projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" emacs-persistence-directory))
(defconst user-graphene-geometry-file (expand-file-name "graphene-geometry" emacs-persistence-directory))

;; create required directories
(unless (file-directory-p emacs-persistence-directory)
    (make-directory emacs-persistence-directory t))

(unless (file-directory-p user-backup-dir)
  (make-directory user-backup-dir))

(unless (file-directory-p user-image-dired-dir)
  (make-directory user-image-dired-dir))

;(defconst emacs-saveplacefile-file (concat emacs-persistence-directory "/places"))
;(defconst emacs-autosavelistfileprefix-dir (concat emacs-persistence-directory "/auto-save-list"))
;(defconst emacs-tramp-dir (concat emacs-persistence-directory "/tramp"))
;(defconst emacs-ido-last-file (concat emacs-persistence-directory "/ido-last"))
;(defconst emacs-savehist-file (concat emacs-persistence-directory "/savehist"))
;(defconst emacs-recentfiles-file (concat emacs-persistence-directory "/recent-files"))
;(defconst emacs-smexsavefile-file (concat emacs-persistence-directory "/smex-items"))

;(defconst emacs-acomphistfile-file (concat emacs-persistence-directory "/ac-comphist.dat"))
;(defconst emacs-autocompletedict (concat emacs-persistence-directory "/ac-dict")
;(defconst emacs-abbrevdefs-file (concat emacs-persistence-directory "/abbrev_defs.el"))
#+END_SRC

* 00-mode-mappings
#+BEGIN_SRC emacs-lisp
;; YAML
(autoload 'yaml-mode "yaml-mode")
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("jsTestDriver\\.conf$" . yaml-mode))

;; offlineimaprc
(add-to-list 'auto-mode-alist '("\\.offlineimaprc$" . conf-mode))

;; Snippets
(add-to-list 'auto-mode-alist '("yasnippet/snippets" . snippet-mode))
(add-to-list 'auto-mode-alist '("\\.yasnippet$" . snippet-mode))

;; Apache config
(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
(add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
(add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
(add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode))

;; XML/JSP
(add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.jsp$" . nxml-mode))

;; Mutt
(add-to-list 'auto-mode-alist '("mutt/muttrc$" . muttrc-mode))

(add-to-list 'auto-mode-alist '("zsh/z.*$" . shell-script-mode))
#+END_SRC

* 00-sane-defaults
#+BEGIN_SRC emacs-lisp
;; Allow pasting selection outside of Emacs
(setq x-select-enable-clipboard t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Real emacs knights don't use shift to mark things
(setq shift-select-mode nil)

;; Transparently open compressed files
(auto-compression-mode t)

;; Enable syntax highlighting for older Emacsen that have it off
(global-font-lock-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Always display line and column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; Lines should be 80 characters wide, not 72
(setq fill-column 120)

;;; Undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

;; Never insert tabs
(set-default 'indent-tabs-mode nil)

;; Show me empty lines after buffer end
;(set-default 'indicate-empty-lines t)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; Don't break lines for me, please
(setq-default truncate-lines t)

;; Keep cursor away from edges when scrolling up/down
(require 'smooth-scrolling)

;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
(setq org-replace-disputed-keys t)

;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)

;; Represent undo-history as an actual tree (visualize with C-x u)
(setq undo-tree-mode-lighter "")
(use-package undo-tree
  :init (global-undo-tree-mode))

;; Sentences do not need double spaces to end. Period.
(set-default 'sentence-end-double-space nil)

;; A saner ediff
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
;; that you can always see what's happening.
(setq eval-expression-print-level nil)

;; When popping the mark, continue popping until the cursor actually moves
;; Also, if the last command was a copy - skip past all the expand-region cruft.
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it
      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))
#+END_SRC

* 01-graphene
#+BEGIN_SRC emacs-lisp

;; (use-package graphene
;;   :init 
;;   (progn
;;     (setq graphene-speedbar-auto nil
;;           graphene-geometry-file user-graphene-geometry-file
;;           projectile-cache-file user-projectile-cache-file
;;           projectile-known-projects-file user-projectile-known-projects-file)
;;     (projectile-global-mode)))
;; ;

(add-hook 'after-init-hook 
          (lambda ()
            (use-package graphene
              :init 
              (progn
                (setq graphene-speedbar-auto nil
                      graphene-geometry-file user-graphene-geometry-file
                      projectile-cache-file user-projectile-cache-file
                      projectile-known-projects-file user-projectile-known-projects-file)
                (projectile-global-mode)))))
#+END_SRC

* 02-shortcuts
#+BEGIN_SRC emacs-lisp
(defun uniq-lines (start end)
  "Removes duplicate lines from the selected region."
  (interactive "*r")
  (goto-char start)
  (beginning-of-line)
  (let ((last ""))
    (while (< (point) end)
      (let* ((bol (point))
             (eol (progn (end-of-line) (point)))
             (text (buffer-substring bol eol)))
        (forward-char)
        (if (string= last text)
            (delete-region bol (point))
          (setq last text))))))

(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

(defun iy-tab-noconflict ()
  "...?"
  (let ((command (key-binding [tab]))) ; remember command
    (local-unset-key [tab]) ; unset from (kbd "<tab>")
    (local-set-key (kbd "TAB") command))) ; bind to (kbd "TAB")

(defun toggle-frame-split ()
    "If the frame is split vertically, split it horizontally or vice versa.
Assumes that the frame is only split into two."
    (interactive)
    (unless (= (length (window-list)) 2)
      (error "Can only toggle a frame split in two"))
    (let ((split-vertically-p (window-combined-p)))
      (delete-window) ; closes current window
      (if split-vertically-p
          (split-window-horizontally)
              (split-window-vertically)) ; gives us a split with the
                                        ; other window twice
          (switch-to-buffer nil))) ; restore the original window in
                                        ; this part of the frame

(defun rotate-windows ()
  "Rotate your windows."
  (interactive)
  (cond
   ((not (> (count-windows) 1))
    (message "You can't rotate a single window!"))
   (t
    (let ((i 0)
          (num-windows (count-windows)))
      (while  (< i (- num-windows 1))
        (let* ((w1 (elt (window-list) i))
               (w2 (elt (window-list) (% (+ i 1) num-windows)))
               (b1 (window-buffer w1))
               (b2 (window-buffer w2))
               (s1 (window-start w1))
               (s2 (window-start w2)))
          (set-window-buffer w1 b2)
          (set-window-buffer w2 b1)
          (set-window-start w1 s2)
          (set-window-start w2 s1)
          (setq i (1+ i))))))))


(defalias 'qrr 'query-replace-regexp)

(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input."
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)))

(add-hook 'ido-setup-hook
          (lambda ()
            ;; Go straight home
            (define-key ido-file-completion-map
              (kbd "~")
              (lambda ()
                (interactive)
                (if (looking-back "/")
                    (insert "~/")
                  (call-interactively 'self-insert-command))))))

; (global-set-key (kbd "M-j")
;                (lambda ()
;                  (interactive)
;                  (forward-line -1)
;                  (join-line -1)))

;(global-set-key [remap goto-line] 'goto-line-with-feedback)
;(global-unset-key (kbd "C-x C-d"))
;(global-set-key (kbd "C-x C-d") 'ido-dired)
;(global-set-key (kbd "C-x C-m") 'smex)
;(global-set-key (kbd "C-c C-m") 'smex)
;(global-set-key (kbd "C-w") 'backward-kill-word)
;(global-set-key (kbd "C-c C-g") 'magit-status)
;(global-set-key (kbd "C-x C-k") 'kill-region)
;(global-set-key (kbd "C-c C-k") 'kill-region)
;(global-set-key [f5] 'call-last-kbd-macro)
;(global-set-key [f7] 'compile)
;(global-set-key (kbd "C-x 5") 'toggle-frame-split)
;(global-set-key (kbd "C-x 6") 'rotate-windows)
;(global-set-key (kbd "C-\\") 'comment-or-uncomment-region-or-line)
;(global-set-key (kbd "C-c w") 'whitespace-cleanup)
;(global-set-key (kbd "C-c s") 'god-mode-all)
;(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
;(global-set-key (kbd "C-x p") 'switch-to-buffer-other-window)
;(global-set-key (kbd "C-c C-j") 'next-error)
;(global-set-key (kbd "C-C C-k") 'previous-error)
;(global-set-key (kbd "C-c SPC") 'ace-jump-mode)
;(global-set-key (kbd "C-c p g") 'projectile-grep)

;(global-unset-key (kbd "\C-x\C-n"))
;(global-unset-key (kbd "C-x m"))
#+END_SRC

* 05-autocomplete
#+BEGIN_SRC emacs-lisp
; load yasnippet
 (add-hook 'after-init-hook
           ; Load yasnippet first to avoid precedence issues
           (lambda () 
             (use-package yasnippet
               :init
               (progn
                 (yas-global-mode 1)))))

; load auto-complete-config
 (add-hook 'after-init-hook
           (lambda () 
             (use-package auto-complete-config
               :init
               (progn
                  (setq ac-comphist-file emacs-acomphistfile-file)
                  (setq ac-auto-start nil)
                  (setq ac-quick-help-delay 0.5)

                  (add-to-list 'ac-dictionary-directories emacs-autocompletedict)
                  (ac-config-default)
                  (ac-set-trigger-key "TAB")
                  (define-key ac-mode-map  [(control tab)] 'auto-complete)
                  (setq-default ac-sources '(ac-source-yasnippet
                                             ac-source-abbrev
                                             ac-source-dictionary
                                             ac-source-words-in-same-mode-buffers))
                  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
                  (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
                  (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
                  (add-hook 'css-mode-hook 'ac-css-mode-setup)
                  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
                  (global-auto-complete-mode t)))))
#+END_SRC

* 05-general
#+BEGIN_SRC emacs-lisp
(use-package hexrgb)
(use-package ack)
(use-package whole-line-or-region)
(use-package idomenu)
(use-package key-chord)
(use-package pomodoro)
(which-function-mode t)

(use-package i3wm-emacs)

;; https://github.com/sabof/project-explorer
(use-package project-explorer)

(use-package smart-mode-line
  :init
  (progn
    (add-hook 'after-init-hook 'sml/setup)
    (sml/apply-theme 'light)
  ))

(use-package indent-guide
  :init
  (progn
    (indent-guide-global-mode)))

(use-package fill-column-indicator
  :init
  (progn
    (setq fci-rule-character-color "#1c1c1c"
          fci-rule-color "#1c1c1c")))

(use-package saveplace
  :init (progn
          (setq save-place-file user-save-place-file)
          (setq-default save-place t)))

; https://github.com/wasamasa/eyebrowse
(use-package eyebrowse)

; http://emacs-fu.blogspot.com/2011/01/setting-frame-title.html
(setq frame-title-format
  '("" invocation-name ": "(:eval (if (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  "%b"))))

; remove emacs' ability to interactive with git.  This was done
; because accessing remote git repo through sshfs caused major lag.
(delete 'Git vc-handled-backends)

; http://blog.printf.net/articles/tag/emacs
(defun find-tag-at-point ()
  "*Find tag whose name contains TAGNAME.
  Identical to `find-tag' but does not prompt for
  tag when called interactively;  instead, uses
  tag around or before point."
    (interactive)
      (find-tag (if current-prefix-arg
                    (find-tag-tag "Find tag: "))
                (find-tag (find-tag-default))))
(bind-key "<F-9>" 'find-tag-at-point)

;; show-paren-mode
;; show a subtle blinking of the matching paren (the defaults are ugly)
;; http://www.emacswiki.org/cgi-bin/wiki/ShowParenMode
(show-paren-mode t)
(setq show-paren-style 'parenthesis)

;;  abbrevs (emacs will automagically expand abbreviations)
(setq abbrev-file-name                ; tell emacs where to read abbrev
      emacs-abbrevdefs-file)    ; definitions from...
(abbrev-mode t)                       ; enable abbrevs (abbreviations) ...
(when (file-exists-p abbrev-file-name)
  (quietly-read-abbrev-file))         ;  don't tell
(add-hook 'kill-emacs-hook            ; write when ...
  'write-abbrev-file)                 ; ... exiting emacs

;; backups  (emacs will write backups and number them)
(setq make-backup-files t ; do make backups
  backup-by-copying t ; and copy them ...
  version-control t
  vc-make-backup-files t
  kept-new-versions 2
  kept-old-versions 5
  delete-old-versions t)
(setq backup-directory-alist `((".*" . ,user-backup-dir)))

; tramp, for remote access
(setq tramp-default-method "ssh"
      tramp-persistency-file-name emacs-tramp-dir
      tramp-verbose 10)

;; safe locals; we mark these as 'safe', so emacs22+ won't give us annoying
;; warnings
(setq safe-local-variable-values
      (quote ((auto-recompile . t)
              (outline-minor-mode . t)
              auto-recompile outline-minor-mode)))

(setq image-dired-dir user-image-dired-dir)
(setq ido-save-directory-list-file emacs-ido-last-file)

(setq savehist-additional-variables       ;; also save...
      '(search-ring regexp-search-ring)   ;; ... my search entries
      savehist-file emacs-savehist-file)  ;; keep my home clean
(savehist-mode t)                         ;; do customization before activate

;; Run at full power please
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq ispell-personal-dictionary "~/.emacs.d/aspell.dict")

(setq tab-always-indent nil)

;(use-package grandshell-theme
;  :init (load-theme 'grandshell 1))
(use-package moe-theme
    :init (load-theme 'moe-dark t))

;; Highlight matching parentheses when the point is on them.
(show-paren-mode 1)

(when window-system
  (set-frame-font "monoOne 10")
  ; http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/
  (global-prettify-symbols-mode 1))

; disabled that damm bell !
(setq bell-volume 0)
(setq sound-alist nil)
(setq ring-bell-function 'ignore)
(setq visible-bell nil)
#+END_SRC

* 10-evil
#+BEGIN_SRC emacs-lisp
; https://gitorious.org/evil/pages/Home
; https://github.com/timcharper/evil-surround
(use-package evil-surround
  :init (global-evil-surround-mode 1))

; https://github.com/cofi/evil-leader
(use-package evil-leader
  :init
  (progn
    (evil-leader/set-leader "\\")
    (global-evil-leader-mode 1)))

; https://github.com/redguardtoo/evil-matchit
(use-package evil-matchit
  :init 
  (progn
    (global-evil-matchit-mode 1)
    (evil-define-key 'normal evil-matchit-mode-map
      "%" 'evilmi-jump-items)
))

(defcustom dotemacs-evil-state-modes
  '(
    ;fundamental-mode
    text-mode
    prog-mode
    ;dired-mode
    ;comint-mode
    ;log-edit-mode
    ;compilation-mode
)
  "List of modes that should start up in Evil state."
  :type '(repeat (symbol))
  :group 'dotemacs)

; https://gitorious.org/evil
(use-package evil
  :init
  (progn
    (evil-mode 1)
    (setq evil-insert-state-cursor '("#d13a82" hbar))  ; TODO: Turn color into named variables
    (setq evil-search-module 'evil-search)
    (setq evil-magic 'very-magic)

    (defun my-enable-evil-mode ()
      (if (apply 'derived-mode-p dotemacs-evil-state-modes)
          (turn-on-evil-mode)
        ))
    (add-hook 'after-change-major-mode-hook 'my-enable-evil-mode)
    
    (defun my-evil-modeline-change (default-color)
      "changes the modeline color when the evil mode changes"
      (let ((color (cond ((evil-insert-state-p) '("#002233" . "#ffffff"))  ; TODO: Turn colors into named variables
                         ((evil-visual-state-p) '("#330022" . "#ffffff"))  ; TODO: Turn colors into named variables
                         ((evil-normal-state-p) default-color)
                         (t '("#821917" . "#ffffff")))))  ; TODO: Turn colors into named variables
        (set-face-background 'mode-line (car color))
        (set-face-foreground 'mode-line (cdr color))))

    (lexical-let ((default-color (cons (face-background 'mode-line)
                                       (face-foreground 'mode-line))))
      (add-hook 'post-command-hook (lambda () (my-evil-modeline-change default-color))))
))

(defconst evil-nerd-commenter-path (expand-file-name (substitute-in-file-name "$HOME/src/evil-nerd-commenter")))
(if (file-directory-p evil-nerd-commenter-path)
    (add-to-list 'load-path evil-nerd-commenter-path)
  (message "Unable to add evil-nerd-commenter %s to load-path" evil-nerd-commenter-path))

; https://github.com/redguardtoo/evil-nerd-commenter
(use-package evil-nerd-commenter
  :init
  (progn
    (evil-leader/set-key
      "ci" 'evilnc-comment-or-uncomment-lines
      "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
      "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
      "cc" 'evilnc-copy-and-comment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region
      "cv" 'evilnc-toggle-invert-comment-line-by-line)))


(use-package evil-jumper
  :init
  (progn
    (setq evil-jumper-auto-center t)
    ; TODO (setq evil-jumper-file (concat dotemacs-cache-directory "evil-jumps"))
    (setq evil-jumper-auto-save-interval 3600)
))

(use-package evil-numbers)
(use-package evil-visualstar)
(use-package evil-indent-textobject)
(use-package evil-exchange
  :init
  (progn
    (evil-exchange-install)
))
#+END_SRC

* 10-flyspell
#+BEGIN_SRC emacs-lisp

(use-package flyspell
  :init
  (progn
    (when is-linux
      (add-hook 'fundamental-mode-hook 
                (lambda () 
                  (flyspell-mode 1))))))
#+END_SRC

* 10-git
#+BEGIN_SRC emacs-lisp
; https://github.com/magit/git-modes

(use-package git-commit-mode)
(use-package git-rebase-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
(use-package gitattributes-mode)
#+END_SRC

* 20-clojure
#+BEGIN_SRC emacs-lisp

; https://github.com/clojure-emacs/clojure-mode
(use-package clojure-mode
  :init
  (progn
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'clojure-mode-hook 'subword-mode)
    (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
    ))

; https://github.com/clojure-emacs/cider
(use-package cider
  :init
  (progn
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (add-hook 'cider-mode-hook 'disable-evil-mode)
    (setq nrepl-hide-special-buffers t)
    ))

; https://github.com/clojure-emacs/ac-cider
(use-package ac-cider
  :init
  (progn
    (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
    (add-hook 'cider-mode-hook 'ac-cider-setup)
    (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'cider-mode))
    ))
#+END_SRC

* 20-css
#+BEGIN_SRC emacs-lisp
; http://blog.gabrielsaldana.org/easy-css-editing-with-emacs/
; CSS and Rainbow modes 
(defun all-css-modes() (css-mode) (rainbow-mode)) 

;; Load both major and minor modes in one call based on file type 
(add-to-list 'auto-mode-alist '("\\.css$" . all-css-modes))
#+END_SRC

* 20-el
#+BEGIN_SRC emacs-lisp
;; elisp
(add-to-list 'auto-mode-alist '("Carton$" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("Cask$" . emacs-lisp-mode))

(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
#+END_SRC

* 20-html
#+BEGIN_SRC emacs-lisp
; http://web-mode.org/
(use-package web-mode
             :init
             (progn
               (setq web-mode-ac-sources-alist
                     '(("css" . (ac-source-css-property))
                       ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
                     
               (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
               (add-to-list 'auto-mode-alist '("\\.css" . web-mode))
               (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
               
               ; https://github.com/smihica/emmet-mode
               (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
               (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
               ))
#+END_SRC

* 20-js
#+BEGIN_SRC emacs-lisp
(use-package js2-mode)
(use-package js2-refactor)

(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-hook 'js2-mode-hook (lambda ()
                           (auto-fill-mode -1)))
#+END_SRC

* 20-org
#+BEGIN_SRC emacs-lisp
;; org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+END_SRC

* 20-py
#+BEGIN_SRC emacs-lisp
;; TODO check out traad https://github.com/abingham/traad
;; Traad is a client-server approach to use the rope Python refactory library.

(use-package elpy
  :init
  (progn
    (elpy-enable)))

(use-package jedi
  :init
  (progn
    (bind-key "C-c /" 'jedi:get-in-function-call)
    ;; Don't let tooltip show up automatically
    (setq jedi:get-in-function-call-delay 10000000)
    ;; Start completion at method dot
    (setq jedi:complete-on-dot t)
    (setq jedi:setup_keys t)
    (add-hook 'python-mode-hook 'eldoc-mode)
    (add-hook 'python-mode-hook 'jedi:setup)))
#+END_SRC

* 20-rst
#+BEGIN_SRC emacs-lisp
(use-package rst
  :init
  (progn
    (add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))
    (add-to-list 'auto-mode-alist '("\\.rest$" . rst-mode))))
#+END_SRC

* 20-rust
(use-package rust-mode)
* 20-ruby
#+BEGIN_SRC emacs-lisp
;; robe - https://github.com/dgutov/robe
(use-package robe
  :init
  (progn
    (push 'company-robe company-backends)
))

;; Ruby - https://github.com/zenspider/enhanced-ruby-mode
(use-package enh-ruby-mode 
  :init
  (progn
    (add-hook 'enh-ruby-mode-hook 'robe-mode)
    (add-to-list 'ac-modes 'enh-ruby-mode)
    (setq robe-turn-on-eldoc t)
    (inf-ruby-minor-mode +1)

    (add-to-list 'auto-mode-alist '("\\.rake$" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.watchr$" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("Rakefile$" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.gemspec$" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.ru$" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("Gemfile" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("capfile" . enh-ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.erb$" . rhtml-mode))
)

;; inf-ruby - https://github.com/nonsequitur/inf-ruby  
(use-package  inf-ruby
  :init
  (progn
    (add-hook 'inf-ruby-mode-hook 'ac-inf-ruby-enable)
    (add-to-list 'ac-modes 'inf-ruby-mode))
    (define-key inf-ruby-mode-map (kbd "TAB") 'auto-complete)
))
#+END_SRC

* 20-textmode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
          (lambda ()
            (interactive)
            (set-fill-column 78)   ; lines are 78 chars long ...         
            (auto-fill-mode t)     ; ... and wrapped around automatically
            ))
#+END_SRC

* 30-flycheck
#+BEGIN_SRC emacs-lisp

(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

* 30-magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  (progn
    (bind-key "C-x C-g" 'magit-status)))
#+END_SRC

* 30-paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
    (add-hook 'ielm-mode-hook 'paredit-mode)
    (add-hook 'lisp-mode-hook 'paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
    (add-hook 'scheme-mode-hook 'paredit-mode)))
#+END_SRC

* 50-buffermove
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :init
  (progn
    (bind-key "C-S-<up>" 'buf-move-up)
    (bind-key "C-S-<down>" 'buf-move-down)
    (bind-key "C-S-<right>" 'buf-move-right)
    (bind-key "C-S-<left>" 'buf-move-left)
))
#+END_SRC

* 50-changeinner
#+BEGIN_SRC emacs-lisp
(use-package change-inner
  :init 
  (progn
    (bind-key "M-i" 'change-inner)
    (bind-key "M-o" 'change-outer)))
#+END_SRC

* 50-diminish
#+BEGIN_SRC emacs-lisp
;(require 'diminish)

;(eval-after-load "flyspell"
  ;'(diminish 'flyspell-mode))
;(eval-after-load "whitespace"
  ;'(diminish 'global-whitespace-mode))
;(eval-after-load "flycheck"
  ;'(setq-default flycheck-mode-line-lighter " ✓"))
;(eval-after-load "smartparens"
  ;'(diminish 'smartparens-mode))

;(eval-after-load "hi-lock"
  ;'(diminish 'hi-lock-mode))


;(diminish 'auto-complete-mode)
;(diminish 'yas-minor-mode)
;(diminish 'magit-auto-revert-mode)
;(diminish 'auto-fill-function)
;(diminish 'isearch-mode)

;(add-hook 'emacs-lisp-mode-hook
          ;(lambda ()
            ;(setq mode-name "el")))
#+END_SRC

* 50-emacsrocks
#+BEGIN_SRC emacs-lisp
;; Push mark when using ido-imenu
(defvar push-mark-before-goto-char nil)

(defadvice goto-char (before push-mark-first activate)
  (when push-mark-before-goto-char
    (push-mark)))

; https://gist.github.com/2360578
(defun ido-imenu ()
  "Update the imenu index and then use ido to select a symbol to navigate to.
Symbols matching the text at point are put first in the completion list."
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (cl-flet ((addsymbols (symbol-list)
                       (when (listp symbol-list)
                         (dolist (symbol symbol-list)
                           (let ((name nil) (position nil))
                             (cond
                              ((and (listp symbol) (imenu--subalist-p symbol))
                               (addsymbols symbol))

                              ((listp symbol)
                               (setq name (car symbol))
                               (setq position (cdr symbol)))

                              ((stringp symbol)
                               (setq name symbol)
                               (setq position (get-text-property 1 'org-imenu-marker symbol))))

                             (unless (or (null position) (null name))
                               (add-to-list 'symbol-names name)
                               (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    ;; If there are matching symbols at point, put them at the beginning of `symbol-names'.
    (let ((symbol-at-point (thing-at-point 'symbol)))
      (when symbol-at-point
        (let* ((regexp (concat (regexp-quote symbol-at-point) "$"))
               (matching-symbols (delq nil (mapcar (lambda (symbol)
                                                     (if (string-match regexp symbol) symbol)) symbol-names))))
          (when matching-symbols
            (sort matching-symbols (lambda (a b) (> (length a) (length b))))
            (mapc (lambda (symbol) (setq symbol-names (cons symbol (delete symbol symbol-names))))
                  matching-symbols)))))
    (let* ((selected-symbol (ido-completing-read "Symbol? " symbol-names))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (goto-char position))))


;;;_. Emacs Rocks

;;;_. Emacs Rocks 04
; http://www.emacswiki.org/emacs/IyGoToChar
; iy-go-to-char - like f in Vim
(use-package jump-char
  :init
  (progn
    (bind-key "M-m" 'jump-char-forward)
    (bind-key "M-M" 'jump-char-backward)

    ;; Remap old M-m to M-i (better mnemonic for back-to-indentation)
    ;; We lose tab-to-tab-stop, which is no big loss in my use cases.
    (bind-key "M-i" 'back-to-indentation)))

;;;_. Emacs Rocks 04
;; Expand region (increases selected region by semantic units)
(use-package expand-region
  :init
  (progn
    (evil-leader/set-key "=" 'er/expand-region)))

;;;_. Emacs Rocks 10
; http://www.emacswiki.org/emacs/AceJump
(use-package ace-jump-mode
  :init
  (progn
    (evil-leader/set-key "j" 'ace-jump-mode)))

; https://github.com/waymondo/ace-jump-buffer
(use-package ace-jump-buffer
  :init  
  (progn
    (evil-leader/set-key "b" 'ace-jump-buffer)))

; https://github.com/abo-abo/ace-window
(use-package ace-window
  :init
  (progn
    (global-set-key (kbd "M-p") 'ace-window)))

(add-hook 'ace-jump-buffer-hook 
          (lambda () (indent-guide-mode nil)))

;; Push mark when using ido-imenu
(defvar push-mark-before-goto-char nil)

(defadvice goto-char (before push-mark-first activate)
  (when push-mark-before-goto-char
    (push-mark)))

(defun add-hyper-char-to-ace-jump-word-mode (c)
  (define-key global-map
    (read-kbd-macro (concat "H-" (string c)))
    `(lambda ()
       (interactive)
       (setq ace-jump-query-char ,c)
       (setq ace-jump-current-mode 'ace-jump-word-mode)
       (ace-jump-do (concat "\\b"
                            (regexp-quote (make-string 1 ,c)))))))

(loop for c from ?0 to ?9 do (add-hyper-char-to-ace-jump-word-mode c))
(loop for c from ?A to ?Z do (add-hyper-char-to-ace-jump-word-mode c))
(loop for c from ?a to ?z do (add-hyper-char-to-ace-jump-word-mode c))
(loop for c from ?Å to ?ø do (add-hyper-char-to-ace-jump-word-mode c))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

* 50-linum
#+BEGIN_SRC emacs-lisp
(use-package linum
  :init
  (progn
    ; enable display of line-numbers to left of buffer,
    ; update linum's format
    (setq linum-format "%d ") 
    (global-linum-mode 1)))
#+END_SRC

* 60-ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  (progn 
    (setq ibuffer-saved-filter-groups
          (quote (("default"      
                   ("resume"
                    (filename . "resume"))
                   ("HemlockForest"
                    (filename . "HemlockForest"))
                   ("Emacs Config"
                    (filename . "emacs"))
                   ("dmenu_ssh"
                    (filename . "dmenu_ssh"))
                   ("DotFilesForest"
                    (filename . "dot-files-forest"))
                   ("version control" 
                    (or (mode . svn-status-mode)
                        (mode . svn-log-edit-mode)
                        (name . "^\\*svn-")
                        (name . "^\\*vc\\*$")
                        (name . "^\\*Annotate")
                        (name . "^\\*git-")
                        (name . "^\\*vc-")))
                   ("emacs" 
                    (or 
                     (name . "^\\*scratch\\*$")
                     (name . "^\\*Messages\\*$")
                     (name . "^TAGS\\(<[0-9]+>\\)?$")
                     (name . "^\\*Help\\*$")
                     (name . "^\\*info\\*$")
                     (name . "^\\*Occur\\*$")
                     (name . "^\\*grep\\*$")
                     (name . "^\\*Compile-Log\\*$")
                     (name . "^\\*Backtrace\\*$")
                     (name . "^\\*Process List\\*$")
                     (name . "^\\*gud\\*$")
                     (name . "^\\*Man")
                     (name . "^\\*WoMan")
                     (name . "^\\*Customize\*")
                     (name . "^\\*Pymacs\*")
                     (name . "^\\*Kill Ring\\*$")
                     (name . "^\\*Completions\\*$")
                     (name . "^\\*tramp")
                     (name . "^\\*Quail\*")
                     (name . "^\\*pymacs run")
                     (name . "^\\*shell\\*$")
                     (name . "^\\*compilation\\*$")))
                   ("Programming" ;; prog stuff not already in MyProjectX
                    (or
                     (mode . c-mode)
                     (mode . perl-mode)
                     (mode . python-mode)
                     (mode . emacs-lisp-mode)
                     (mode . scheme-mode)
                     ;; etc
                     ))))))

    (add-hook 'ibuffer-mode-hook 
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))

    (setq ibuffer-show-empty-filter-groups nil)

    (global-set-key [XF86HomePage] 'ibuffer)))

(use-package ibuf-ext)
#+END_SRC

* 60-ido
#+BEGIN_SRC emacs-lisp
(use-package flx-ido
  :init
  (progn
    ;(bind-key "C-x C-i" 'ido-imenu)
    (flx-ido-mode 1)
    (ido-vertical-mode)
    (setq ido-use-faces nil)))
#+END_SRC

* 60-multiplecursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors)
#+END_SRC

* 60-multiterm
#+BEGIN_SRC emacs-lisp
; http://www.emacswiki.org/emacs/MultiTerm
(use-package multi-term
  :init
  (setq multi-term-program "/bin/zsh"))
#+END_SRC

* 60-prettysymbolmode
#+BEGIN_SRC emacs-lisp
(use-package pretty-symbols
  :init (progn
    (add-hook 'emacs-lisp-hook 'pretty-symbols)
    (add-hook 'cperl-hook 'pretty-symbols)
    (add-hook 'js2 'pretty-symbols)
    (add-hook 'javascript 'pretty-symbols)
    (add-hook 'python 'pretty-symbols)))
#+END_SRC

* 60-rainbow
#+BEGIN_SRC emacs-lisp
; http://emacs-fu.blogspot.com/2011/05/toward-balanced-and-colorful-delimiters.html
(use-package rainbow-delimiters
  :init
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))

(use-package rainbow-mode)
#+END_SRC

* 60-recentf
#+BEGIN_SRC emacs-lisp
; Save a list of recent files visited. (open recent file with C-x f)
(use-package recentf
  :init
  (progn
    (bind-key "C-x C-r" 'ido-recentf-open)
    (setq recentf-save-file emacs-recentfiles-file
          recentf-max-saved-items 500
          recentf-max-menu-items 60)
    (recentf-mode t)))

; http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
#+END_SRC

* 60-uniquify
#+BEGIN_SRC emacs-lisp
; http://emacs-fu.blogspot.com/2009/11/making-buffer-names-unique.html
(use-package uniquify
  :init
  (progn
    (setq 
     uniquify-buffer-name-style 'post-forward
     uniquify-separator ":")))
#+END_SRC

* 80-esup
#+BEGIN_SRC emacs-lisp
(use-package esup)
#+END_SRC

* 95-localhost
#+BEGIN_SRC emacs-lisp
(defun short-hostname()
  (string-match "[0-9A-Za-z]+" system-name)
  (substring system-name (match-beginning 0) (match-end 0)))

;; Load configuration for this host only, ie ~/.emacs.d/lisp/hosts/$HOSTNAME.el if exist
(defconst local-host-file (downcase (concat 
                                      (concat user-emacs-directory (file-name-as-directory "/lisp/hosts"))
                                      (short-hostname)
                                      ".el")))

(if (file-exists-p local-host-file)
  (load-file local-host-file))
#+END_SRC

* 99-defuns
#+BEGIN_SRC emacs-lisp
(defun client-save-kill-emacs(&optional display)
  " This is a function that can bu used to shutdown save buffers and 
shutdown the emacs daemon. It should be called using 
emacsclient -e '(client-save-kill-emacs)'.  This function will
check to see if there are any modified buffers or active clients
or frame.  If so an x window will be opened and the user will
be prompted."

  (let (new-frame modified-buffers active-clients-or-frames)

    ; Check if there are modified buffers or active clients or frames.
    (setq modified-buffers (modified-buffers-exist))
    (setq active-clients-or-frames ( or (> (length server-clients) 1)
					(> (length (frame-list)) 1)
				       ))  

    ; Create a new frame if prompts are needed.
    (when (or modified-buffers active-clients-or-frames)
      (when (not (eq window-system 'x))
	(message "Initializing x windows system.")
	(x-initialize-window-system))
      (when (not display) (setq display (getenv "DISPLAY")))
      (message "Opening frame on display: %s" display)
      (select-frame (make-frame-on-display display '((window-system . x)))))

    ; Save the current frame.  
    (setq new-frame (selected-frame))


    ; When displaying the number of clients and frames: 
    ; subtract 1 from the clients for this client.
    ; subtract 2 from the frames this frame (that we just created) and the default frame.
    (when ( or (not active-clients-or-frames)
	       (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2)))) 
      
      ; If the user quits during the save dialog then don't exit emacs.
      ; Still close the terminal though.
      (let((inhibit-quit t))
             ; Save buffers
	(with-local-quit
	  (save-some-buffers)) 
	      
	(if quit-flag
	  (setq quit-flag nil)  
          ; Kill all remaining clients
	  (progn
	    (dolist (client server-clients)
	      (server-delete-client client))
		 ; Exit emacs
	    (kill-emacs))) 
	))

    ; If we made a frame then kill it.
    (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
    )
  )


(defun modified-buffers-exist() 
  "This function will check to see if there are any buffers
that have been modified.  It will return true if there are
and nil otherwise. Buffers that have buffer-offer-save set to
nil are ignored."
  (let (modified-found)
    (dolist (buffer (buffer-list))
      (when (and (buffer-live-p buffer)
		 (buffer-modified-p buffer)
		 (not (buffer-base-buffer buffer))
		 (or
		  (buffer-file-name buffer)
		  (progn
		    (set-buffer buffer)
		    (and buffer-offer-save (> (buffer-size) 0))))
		 )
	(setq modified-found t)
	)
      )
    modified-found
    )
  )
#+END_SRC

#+HTML: <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
#+HTML: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
