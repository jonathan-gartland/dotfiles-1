# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi
# Check for interactive bash and that we haven't already been sourced.
[ -z "$BASH_VERSION" -o -z "$PS1" -o -n "$BASH_COMPLETION" ] && return

if [ "$PS1" ]; then
  if [ "$BASH" ]; then
    PS1='\u@\h:\w\$ '
    if [ -f /etc/bash.bashrc ]; then
	. /etc/bash.bashrc
    fi
  else
    if [ "`id -u`" -eq 0 ]; then
      PS1='# '
    else
      PS1='$ '
    fi
  fi
fi

umask 022
# -*- mode: shell-script -*-

# ~/.bash_profile is executed by bash(1) for login shells.

# source all login.d files
source ~/.bash/_utils
# -*- mode: shell-script; -*-

# run source in all files of a directory (path provided from first arg)
function source-dir ()
{
    SOURCE_DIR="$1"

    if [ -d "$SOURCE_DIR" -a -r "$SOURCE_DIR" -a -x "$SOURCE_DIR" ]; then
        for i in "$SOURCE_DIR"/*; do
            [[ ${i##*/} != @(*~|*.bak|*.swp|\#*\#|*.dpkg*|.rpm*) ]] &&
                    [ \( -f $i -o -h $i \) -a -r $i ] && . $i
        done
    fi
    unset i
}
source-dir ~/.bash/login.d
# -*- mode: shell-script -*-

# include .zshrc if it exists
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
# ~/.bashrc is executed by zsh(1) for non-login shells.

# source all nonlogin.d files
source ~/.bash/_utils
# -*- mode: shell-script; -*-

# run source in all files of a directory (path provided from first arg)
function source-dir ()
{
    SOURCE_DIR="$1"

    if [ -d "$SOURCE_DIR" -a -r "$SOURCE_DIR" -a -x "$SOURCE_DIR" ]; then
        for i in "$SOURCE_DIR"/*; do
            [[ ${i##*/} != @(*~|*.bak|*.swp|\#*\#|*.dpkg*|.rpm*) ]] &&
                    [ \( -f $i -o -h $i \) -a -r $i ] && . $i
        done
    fi
    unset i
}
source-dir ~/.bash/nonlogin.d
# -*- mode: shell-script -*-

if [[ "$TERM" == "dumb" ]]
    then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
fi

# if [[ "$TERM" == "dumb" ]]
#     then
#     unsetopt zle
#     unsetopt prompt_cr
#     unsetopt prompt_subst
#     unfunction precmd
#     unfunction preexec
#     PS1='$ '
# fi

# # If not running interactively, don't do anything
# [ -z "$PS1" ] && return

# # check the window size after each command and, if necessary,
# # update the values of LINES and COLUMNS.
# #TODO: zsh equivalent?
# # shopt -s checkwinsize
# #autoload -U promptinit
# #promptinit
# #prompt bart

# # keep history file between sessions
# DIRSTACKSIZE=15
# HISTSIZE=8192
# SAVEHIST=8192
# HISTFILE=~/.history

# #--- zsh options ---
# #
# setopt autopushd # turn cd into pushd for all situations 
# setopt APPEND_HISTORY
# setopt AUTO_CD # cd if no matching command
# setopt EXTENDED_HISTORY # saves timestamps on history
# setopt EXTENDED_GLOB # globs #, ~ and ^
# setopt PUSHDMINUS       # make using cd -3 go to the 3rd directory history (dh) directory instead of having to use + (the default)
# setopt PUSHD_IGNORE_DUPS
# setopt HIST_IGNORE_ALL_DUPS
# setopt AUTO_PARAM_SLASH # adds slash at end of tabbed dirs
# setopt CHECK_JOBS # check bg jobs on exit
# setopt CORRECT # corrects spelling
# setopt CORRECT_ALL # corrects spelling
# setopt GLOB_DOTS # find dotfiles easier
# setopt HASH_CMDS # save cmd location to skip PATH lookup
# setopt HIST_NO_STORE # don't save 'history' cmd in history
# setopt INC_APPEND_HISTORY # append history as command are entered
# setopt LIST_ROWS_FIRST # completion options left-to-right, top-to-bottom
# setopt LIST_TYPES # show file types in list
# setopt MARK_DIRS # adds slash to end of completed dirs
# setopt NUMERIC_GLOB_SORT # sort numerically first, before alpha
# setopt PROMPT_SUBST # sub values in prompt (though it seems to work anyway haha)
# setopt SHARE_HISTORY # share history between open shells

# unsetopt beep

# zmodload zsh/complist
# autoload -Uz compinit && compinit

# _force_rehash() {
#   (( CURRENT == 1 )) && rehash
#   return 1	# Because we didn't really complete anything
# }
# zstyle ':completion:::::' completer _force_rehash _complete _approximate

# zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
# zstyle ':completion:*:descriptions' format "- %d -"
# zstyle ':completion:*:corrections' format "- %d - (errors %e})"
# zstyle ':completion:*:default' list-prompt '%S%M matches%s'
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*:manuals' separate-sections true
# zstyle ':completion:*' menu select
# zstyle ':completion:*' verbose yes

# _sql_cpl() {
#     local a
#     read -l a
#     reply=(`sql -l -q $a`)
# }
# compctl -K _sql_cpl sql


# umask 022

# export SHELL=$(which zsh)

# # bindkey (set to emacs key bindings)
# bindkey -e
# -*- mode: shell-script -*-

# # keep history file between sessions
# DIRSTACKSIZE=15
# HISTSIZE=8192
# SAVEHIST=8192
# HISTFILE=~/.history
# # -*- mode: shell-script -*-

# # From http://aperiodic.net/phil/prompt/, with slight changes of my own.
# autoload -U promptinit
# setopt autocd autopushd pushdignoredups 
# promptinit

# function precmd {
#     local TERMWIDTH
#     (( TERMWIDTH = ${COLUMNS} - 1 ))

#     ###
#     # Truncate the path if it's too long.
#     ## 

#     PR_FILLBAR=""
#     PR_PWDLEN=""

#     # setup using iTerm right_offset needs to be 9
#     right_offset=0
    
#     local promptsize=$((${#${(%):---(%n@%m)---()--}}- $right_offset ))
#     local pwdsize=${#${(%):-%~}}
    
#     if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
# 	    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
#     else
# 	PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
#     fi
# }


# setopt extended_glob
# preexec () {
#     if [[ "$TERM" == "screen" ]]; then
# 	local CMD=${1[(wr)^(*=*|sudo|-*)]}
# 	echo -n "\ek$CMD\e\\"
#     fi
# }


# setprompt () {
#     ###
#     # Need this so the prompt will work.

#     setopt prompt_subst


#     ###
#     # See if we can use colors.

#     autoload colors zsh/terminfo
#     if [[ "$terminfo[colors]" -ge 8 ]]; then
# 	colors
#     fi
#     for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
# 	eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
# 	eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
# 	(( count = $count + 1 ))
#     done
#     PR_NO_COLOUR="%{$terminfo[sgr0]%}"


#     ###
#     # See if we can use extended characters to look nicer.
    
#     typeset -A altchar
#     set -A altchar ${(s..)terminfo[acsc]}
#     PR_SET_CHARSET="%{$terminfo[enacs]%}"
#     PR_SHIFT_IN="%{$terminfo[smacs]%}"
#     PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
#     PR_HBAR=${altchar[q]:--}
#     PR_ULCORNER=${altchar[l]:--}
#     PR_LLCORNER=${altchar[m]:--}
#     PR_LRCORNER=${altchar[j]:--}
#     PR_URCORNER=${altchar[k]:--}

    
#     ###
#     # Decide if we need to set titlebar text.
    
#     case $TERM in
# 	xterm*)
# 	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
# 	    ;;
# 	screen)
# 	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
# 	    ;;
# 	*)
# 	    PR_TITLEBAR=''
# 	    ;;
#     esac
    
    
#     ###
#     # Decide whether to set a screen title
#     if [[ "$TERM" == "screen" ]]; then
# 	PR_STITLE=$'%{\ekzsh\e\\%}'
#     else
# 	PR_STITLE=''
#     fi
    
    
#     ###
#     # APM detection
    
#     #if which ibam > /dev/null; then
# 	#PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
#     #elif which apm > /dev/null; then
# 	#PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
#     #else
# 	#PR_APM=''
#     #fi
    
    
#     ###
#     # Finally, the prompt.

#     PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
# $PR_BLUE$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# $PR_BLUE%(!.%sroot%s.%n)$PR_RED@%m\
# $PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# $PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
# $PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_URCORNER$PR_SHIFT_OUT\

# $PR_BLUE$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
# %(?..$PR_BLUE%?$PR_BLUE:)\
# $PR_BLUE%D{%H:%M}\
# $PR_BLUE:%(!.$PR_BLUE.$PR_MAGENTA)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_NO_COLOUR '

#     RPROMPT=' $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
# ($PR_BLUE%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

#     PS2='$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
# $PR_BLUE%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
# }

# autoload -U colors && colors
# autoload -U promptinit
# promptinit
# #prompt suse

# # prompt from http://tsdh.wordpress.com/2007/12/06/my-funky-zsh-prompt/
# setprompt() {
# local blue_op="%{$fg[blue]%}[%{$reset_color%}"
# local blue_cp="%{$fg[blue]%}]%{$reset_color%}"
# local path_p="${blue_op}%~${blue_cp}"
# local user_host="${blue_op}%n@%m${blue_cp}"
# local ret_status="${blue_op}%?${blue_cp}"
# local hist_no="${blue_op}%h${blue_cp}"
# local smiley="%(?,%{$fg[green]%}:%)%{$reset_color%},%{$fg[red]%}:(%{$reset_color%})"
# PROMPT="╭─${path_p}─${user_host}─${ret_status}─${hist_no}
# ╰─${blue_op}${smiley}${blue_cp} %# "
# local cur_cmd="${blue_op}%_${blue_cp}"
# PROMPT2="${cur_cmd}> "
# }

# setprompt



# -*- mode: shell-script -*-

hostname=$(/usr/bin/env hostname -f)
/usr/bin/env hostname -f)
/usr/bin/env hostname -f
# stuff for zathras.sr.unh.edu

if [[ $hostname = "zathras.sr.unh.edu" || $hostname = "kosh.sr.unh.edu"  || $hostname = "skk" ]]; then
    export EDITOR="ew"
    export VISUAL="ew"
    export ALTERNATE_EDITOR="/usr/bin/emacs -nw"
elif [ $hostname = "knight.cx" ]; then
    export EDITOR="vim"
    export VISUAL="vim"
else
    export EDITOR="vim"
    export VISUAL="gvim"
    export ALTERNATE_EDITOR="/usr/bin/emacs -nw"
fi    
# -*- mode: shell-script -*-

#
# Environment variables
#

#if [ -x $(which most) ]; then
#    export PAGER=most
if [ -x $(which less) ]; then
    export PAGER=less 
elif [ -x $(which more) ]; then
    export PAGER=more
fi
which less)
which less

export stow="$HOME/local/stow"

# setup CDPATH
export CDPATH=.:~:~/src:~/work:/web  
# TODO: rewrite addToCDPATH.fish so that I can add /web* and perhaps other directories

# setup PATH
export PATH="$HOME/local/bin/:$HOME/bin/:$HOME/bin/$(uname -m)/:$PATH:/usr/local/bin:/usr/bin:/bin"
uname -m)/:$PATH:/usr/local/bin:/usr/bin:/bin"
uname -m)/:$PATH:/usr/local/bin:/usr/bin:/bin
uname -m

if [ $(id -u) -eq 0 ]; then
    export PATH="/sbin:/usr/sbin:$PATH"
else
    export PATH="$PATH:/usr/sbin:/sbin"
fi
id -u)
id -u

export MANPATH="$MANPATH:$HOME/local/man"
export TERMINFO="$HOME/.terminfo"

# set PYTHONPATH
python_version=$(/usr/bin/env python -c "import sys;print 'python' + str(sys.version_info[0]) + '.' + str(sys.version_info[1])")
/usr/bin/env python -c "import sys;print 'python' + str(sys.version_info[0]) + '.' + str(sys.version_info[1])")
/usr/bin/env python -c "import sys;print 'python' + str(sys.version_info[0]) + '.' + str(sys.version_info[1])"
export PYTHONPATH="$HOME/.emacs.d/python/lib/$python_version/site-packages/:$HOME/local/lib/$python_version/site-packages/:$HOME/local/stow/lib/:$HOME/dot-files-forest/.lib/lib/$python_version/site-packages/"

dnsdomainname=$(/usr/bin/env dnsdomainname -y)
/usr/bin/env dnsdomainname -y)
/usr/bin/env dnsdomainname -y
hostname=$(hostname -f)
hostname -f)
hostname -f

# rcc
if [ $dnsdomainname= "rcc" ]; then
    # svn variables
    export svndemo="https://svn.sr.unh.edu/svn/demo/"
    export svnskk="https://svn.sr.unh.edu/svn/skk/"
    export svnevents="https://svn.sr.unh.edu/svn/Events/"
    export svnescat="https://svn.sr.unh.edu/svn/eSCAT/"
    export svncrms="https://svn.sr.unh.edu/svn/CRMS/"
    export svntv="https://svn.sr.unh.edu/svn/TwinView/"
    export svneos="https://svn.sr.unh.edu/svn/EOS/"
    export svnseagrant="https://svn.sr.unh.edu/svn/SeaGrant/"
    export svnproject54="https://svn.sr.unh.edu/svn/Project54/"
    export svnsharedperlmodules="https://svn.sr.unh.edu/svn/SharedPerlModules/"
    export svnerma="https://erma-svn.sr.unh.edu/svn/"
    export PATH="$HOME/local/$(uname -m)/bin:$PATH"
    export MANPATH="$MANPATH:$HOME/local/$(uname -m)/man"
fi
/home/skk/.bash/nonlogin.d/40paths: line 41: [: rcc=: unary operator expected

# stuff for zathras.sr.unh.edu
if [ $hostname = "zathras.sr.unh.edu" ]; then
    # Environmental variablles
    export ECLIPSE_HOME="/usr/local/eclipse"
    export PYTHONDOCS="/usr/share/doc/python-docs-2.6/html/"
    export LD_LIBRARY_PATH="$HOME/local/lib:$LD_LIBRARY_PATH"

    export JAVA_HOME="/usr/local/java/IBMJava16"
    export JRE_HOME="$JAVA_HOME"
    export PRINTER="Color-LaserJet-3800"
    export MAILDIR="$HOME/Maildir"
    
    # Database aliases
    export ORACLE_COMMAND="$HOME/bin/pysql.sh"

    export CDPATH=$CDPATH:~/CRMS
fi

if [ $hostname = "kosh.sr.unh.edu" ]; then
    export JAVA_HOME="/usr/local/java/IBMJava16"
    export JRE_HOME="$JAVA_HOME"
    export PRINTER="Color-LaserJet-3800"
    export MAILDIR="$HOME/Maildir"
    export CDPATH=$CDPATH:~/CRMS
    # Database aliases
    export ORACLE_COMMAND="$HOME/bin/pysql.sh"

    # source autojump init file
#    source /etc/profile.d/autojump.zsh
fi

if [ $hostname = "kona.sr.unh.edu" ]; then
    export JAVA_HOME="/usr/local/java/IBMJava16"
    export JRE_HOME="$JAVA_HOME"
fi

if [ $hostname = "spoo.sr.unh.edu" ]; then
    export JAVA_HOME="/usr/local/java/IBMJava16"
    export JRE_HOME="$JAVA_HOME"
fi

if [ $hostname = "long.sr.unh.edu" ]; then
    export PATH="/usr/lib/postgresql/8.3/bin:$PATH"
fi

if [ $hostname = "skk" ]; then
    export svnroot="file:///home/svn/skk/"
    export svnmusic="file:///home/svn/music/"
    export MAILDIR="$HOME/Maildir"
    export JAVA_HOME="/usr/local/java/IBMJava16"
    export JRE_HOME="$JAVA_HOME"
fi

if [ -n $JAVA_HOME ]; then

    if [ -d $JAVA_HOME/bin ]; then
        export PATH="$JAVA_HOME/bin:$PATH"
    fi

    if [ -d $JAVA_HOME/jre/bin ]; then
        export PATH="$JAVA_HOME/jre/bin:$PATH"
    fi
fi

# add ~/.cljr/bin to path
if [ -d $HOME/.cljr/bin ]; then
    export PATH=/home/skk/.cljr/bin:$PATH
fi

# add ~/.lein/bin to path
if [ -d $HOME/.lein/bin ]; then
    export PATH=/home/skk/.lein/bin:$PATH
fi

# -*- mode: shell-script -*-

function _zsh_run_command # "Local zsh function to run a command"
{
    if [[ $1 != '' ]]; then
        command=$1
        echo "Command: $command"
        eval $command
    fi
}

function _print_helper
{
    a2ps_options="--tabsize=4 --highlight-level=heavy --line-numbers=5"
    command="/usr/bin/env a2ps $a2ps_options $@"
    _zsh_run_command "$command"
}

function text1p
{
    a2ps_options="--portrait --columns=1" 
    if [[ $2 == '' ]]; then
        _print_helper $a2ps_options $1
    else
        _print_helper $a2ps_options $1 --output $2
    fi
}

function text1r
{
    a2ps_options="--landscape --columns=1" 
    if [[ $2 == '' ]]; then
        _print_helper $a2ps_options $1
    else
        _print_helper $a2ps_options $1 --output $2
    fi
}

function text2p
{
    a2ps_options="--landscape --columns=2" 
    if [[ $2 == '' ]]; then
        _print_helper $a2ps_options $1
    else
        _print_helper $a2ps_options $1 --output $2
    fi
}

function BackupAndDelete
{
    ~/bin/backup-and-delete.py "$*"
}

function create_maildir # "Create a Maildir directory"
{
    if [[ -d $MAILDIR ]]; then
        if [[ $1 != '' ]]; then 
	        mkdir -m 700 $MAILDIR/.$argv[1]/{,tmp,new,cur}
        fi
    fi 
}

function setup_was_env
{
    if [[ -f "/opt/IBM/setup_was/setup_was.py" ]]; then
        eval "$(/opt/IBM/setup_was/setup_was.py)"
    fi
}

function setup_oracle_env
{
    if [[ -r /usr/local/setup/oracle ]]; then
        eval "$(~/bin/convert_csh_setup_file.py < /usr/local/setup/oracle)"
    fi

    if [[ -r /usr/local/oracle/setup ]]; then
        eval "$(~/bin/convert_csh_setup_file.py < /usr/local/oracle/setup)"
    fi
}

function sql
{
    /usr/bin/python $HOME/work/SQL/sql.py $argv
}

function start_synergy
{
    killall -9  synergys
    synergys
}

function stowdir
{
    echo $stow/$(basename $PWD)
}

function stowdir_local
{
    stowdir=/usr/local/stow/$(basename $PWD)
    echo $stowdir
}

function switch_was_tail_to_emacs
{ 
     export WAS_TAIL_ARGS=" "
     export WAS_TAIL_COMMAND=$HOME/bin/e
}
# -*- mode: shell-script -*-

# color support in diff
if [ -x /usr/bin/colordiff ]; then
    case "$TERM" in
	xterm-color|xterm-256color) alias diff=colordiff ;;
    esac
fi

alias cp='cp -i'
alias df='df -h'
alias du='du -h'
alias grep='grep --with-filename --line-number --color=auto --ignore-case'
alias la='ls -al'	 # show hidden files
alias lc='ls -lcr'	# sort by change time
alias lk='ls -lSr'	# sort by size
alias ll='ls -l'            
alias lm='ls -al |less'	    # pipe through 'more'
alias lR='ls -lR'	 # recursive ls	
alias lr='ls -ltr'	# sort by date DSC
alias ls='ls -hF --color'			 # add colors for filetype recognition
alias lC='ls -hF --color=never'			 # add colors for filetype recognition
alias lt='ls -lt'	# sort by date ASC
alias lu='ls -lur'	# sort by access time
alias lx='ls -lXB'	# sort by extension	
alias mkdir='mkdir -p'										 
alias more='less'
alias mv='mv -i'
alias pl='tail -f -n 30 $HOME/.procmail/log/procmail'
alias putty='set TERM=putty'
alias rm='rm -i'
alias today='date +%F'
alias todayISO1806='date -u +"%FT%TZ"'
alias tree='tree -Csuh'	    # nice alternative to 'ls'
alias watch='watch -n 1'
alias home='ssh skk.ath.cx'
alias rcc='ssh kosh.sr.unh.edu'
alias cis='ssh skknight@turing.unh.edu'
alias pyMemoryReport='sudo $HOME/bin/ps_mem.py' # only works on a system with $USER has SUDO rights
alias ant='ant -logger org.apache.tools.ant.listener.AnsiColorLogger -lib $HOME/CRMS/build/lib/jdepend-2.9/lib/jdepend-2.9.jar'
alias ssh='ssh -C -Y'
alias scp='scp -C'
dnsdomainname=$(/usr/bin/env dnsdomainname -y)
/usr/bin/env dnsdomainname -y)
/usr/bin/env dnsdomainname -y
# rcc
if [[ "$dnsdomainname" == "rcc" || "$dnsdomainname" == "eos" ]]; then
    setup_was_env
    setup_oracle_env

    # catlab
    alias catlab-dev='pushd $PWD; pysql.sh ***REMOVED***; popd'
    alias catlab='pushd $PWD; pysql.sh ***REMOVED***; popd'

    # layout
    alias layout-dev='pushd $PWD; pysql.sh ***REMOVED***; popd'

    # events
    alias events-dev='pushd $PWD; pysql.sh ***REMOVED***; popd'
    alias events='pushd $PWD; pysql.sh ***REMOVED***; popd'

    # alumni
    alias alumni-dev='pushd $PWD; pysql.sh ***REMOVED***; popd'
    alias alumni='pushd $PWD; pysql.sh ***REMOVED***; popd'

    # eos
    alias eos='pushd $PWD; pysql.sh ***REMOVED***; popd'
    alias eos-dev='pushd $PWD; pysql.sh ***REMOVED***; popd'
    
    # mysql
    alias fms-dev='***REMOVED***'
    alias fms-win='***REMOVED***'

    # misc rcc-specific aliases
    alias coverops='ssh blackstar /usr/local/bin/coverops'
fi    
/opt/IBM/setup_was/setup_was.py)"
/opt/IBM/setup_was/setup_was.py)
/opt/IBM/setup_was/setup_was.py
alias wasProfileDelete="/opt/IBM/setup_was/setup_was.py --profile_command=profile_delete"
alias wasProfileList="/opt/IBM/setup_was/setup_was.py --profile_command=profile_list"
alias wasProfileArchive="/opt/IBM/setup_was/setup_was.py --profile_command=profile_archive"
alias wasProfileExport="/opt/IBM/setup_was/setup_was.py --profile_command=profile_export"
alias wasProfileImport="/opt/IBM/setup_was/setup_was.py --profile_command=profile_import"
alias wasLog="/opt/IBM/setup_was/setup_was.py --server_command=server_log"
alias wasTrace="/opt/IBM/setup_was/setup_was.py --server_command=server_trace"
alias wasStop="/opt/IBM/setup_was/setup_was.py --server_command=server_stop"
alias wasStart="/opt/IBM/setup_was/setup_was.py --server_command=server_start"
alias wasStatus="/opt/IBM/setup_was/setup_was.py --server_command=server_status"
alias wasRestart="/opt/IBM/setup_was/setup_was.py --server_command=server_restart"
~/bin/convert_csh_setup_file.py < /usr/local/setup/oracle)"
~/bin/convert_csh_setup_file.py < /usr/local/setup/oracle)
~/bin/convert_csh_setup_file.py < /usr/local/setup/oracle
export ORACLE_BASE="/usr/local/oracle/product/"
export ORACLE_HOME="$ORACLE_BASE/10g"
export ORACLE_TERM="vt220"
export ORACLE_SID="webdev10g"
export EDITOR="vi"
export LD_LIBRARY_PATH="$ORACLE_HOME/lib"
export TNS_ADMIN="/usr/local/setup"
export PATH=""$ORACLE_HOME/bin":$PATH"

hostname=$(/usr/bin/env hostname -f)
/usr/bin/env hostname -f)
/usr/bin/env hostname -f
# stuff for zathras and kosh
if [[ "$hostname" == "zathras.sr.unh.edu" || "$hostname" == "kosh.sr.unh.edu"  ]]; then
    # misc rcc-specific aliases/sets
    alias z0="set DISPLAY 'zathras.sr.unh.edu:0.0'"
    alias c0="set DISPLAY 'chong.sr.unh.edu:0.0'"
    alias c1="set DISPLAY 'cheech.sr.unh.edu:0.0'"

    # General Aliases
    alias bigmomma='/usr/bin/vncviewer -FullColor bigmomma'
    alias amethyst='rdesktop -g1280x1024 -uskk -pv93FgC  amethyst'
    alias spoo='rdesktop -g1900x1100 -uskk -pskk spoo'
fi

if [ "$hostname" == "zathras.sr.unh.edu" ]; then
    alias kosh='synergyc -f kosh'
fi

if [ "$hostname" == "skk" ]; then
    alias sage='pushd $PWD; cd /opt/sage; ./sage -c "notebook(open_viewer=False)" &; popd $PWD'
fi
# -*- mode: shell-script -*-

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
SHELL=/bin/sh lesspipe)"
SHELL=/bin/sh lesspipe)
SHELL=/bin/sh lesspipe
export LESSOPEN="| /usr/bin/lesspipe %s";
export LESSCLOSE="/usr/bin/lesspipe %s %s";

# good less
export LESS='-FSRX'

# set default umask
umask 002
# -*- mode: shell-script -*-
# From <http://www.openslack.org/~piterpk>.

# # check if exists a detached screen session
# DETACH=`screen -ls | grep -c "Detached"`

# # if exists more than one detached session, list they and show a command to
# # help you recover some session
# if [ $DETACH -gt 1 ]; then
#     screen -list
#     echo "You can reattach one of detached session using:"
#     echo -e "\tscreen -r nnnn.tty.host\n"

# # if exists only one detached session, connect to it
# elif [ $DETACH -eq 1 ]; then
#     SESSION=`screen -ls | grep "Detached" | awk '{print $1}'`
#     screen -r $SESSION

# # if not exists at least one detached session, start a new one
# else
#     screen -a && exit
# fi
exit
# -*- mode: shell-script -*-

# ~/.bash_logout is executed by bash(1) when login shell exits.

# source all logout.d files
source ~/.bash/_utils
# -*- mode: shell-script; -*-

# run source in all files of a directory (path provided from first arg)
function source-dir ()
{
    SOURCE_DIR="$1"

    if [ -d "$SOURCE_DIR" -a -r "$SOURCE_DIR" -a -x "$SOURCE_DIR" ]; then
        for i in "$SOURCE_DIR"/*; do
            [[ ${i##*/} != @(*~|*.bak|*.swp|\#*\#|*.dpkg*|.rpm*) ]] &&
                    [ \( -f $i -o -h $i \) -a -r $i ] && . $i
        done
    fi
    unset i
}
source-dir ~/.zsh/logout.d/
# -*- mode: shell-script -*-

# when leaving the console clear the screen to increase privacy
if [ "$SHLVL" = 1 ]; then
    [ -x /usr/bin/clear_console ] && /usr/bin/clear_console -q
fi
