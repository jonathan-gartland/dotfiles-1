
{
    "reraise_exceptions": true,

    "debug_enable": true,

    "default_syntaxes1": [

        {
            "name": "ShellScript/Shell-Unix-Generic",
            "extensions": ["git.scmbrc"]
        },
        {
            "name": "Git Config/Git Config",
            "extensions": [".gitconfig", "gitconfig.HOME", ".gitmodules", ".gitattributes"]
        },
        {
            "name": "Git Config/Git Ignore/Git Ignore",
            "extensions": [".gitignore"]
        },

        {
            // I put XML first because of files like *.tmLanguage. It is unlikely
            // that this rule will result in a false positive, meaning if it
            // matches, you probably want the XML syntax
            "name": "XML/XML",
            "extensions": ["xml.dist"],
            "rules": [
                {"file_name": ".*\\.xml(\\.dist)?$"},
                {"first_line": "^<\\?xml"},
                // See "add_exts_to_lang_settings" setting above for more info
                // if using extensions, you don't need to set "file_name".
                // Rule could be simplified to this:
                //
                // "name": "XML/XML",
                // "rules": [
                //     {"first_line": "^<\\?xml"}
                // ],
                // "extensions": ["xml.dist"]
                //
            ]
        },
        {
            // The Cucumber and RSpec rules come before Rails and Ruby because they end
            // in .rb and will be identified as Rails or Ruby otherwise.
            "name": "Cucumber/Cucumber Steps",
            "rules": [
                {"file_name": ".*steps\\.rb$"}
            ]
        },
        {
            // One could use just the second rule to match every ruby file in a /spec/
            // directory, but I prefer to be more explicit.
            "name": ["RSpec/RSpec", "RSpec (snippets and syntax)/Syntaxes/RSpec", "Better RSpec/Better RSpec"],
            "rules": [
                {"file_name": ".*spec\\.rb$"},
                {"file_name": ".*/spec/.*\\.rb$"},
                {"file_name": ".*\\\\spec\\\\.*\\.rb$"}
            ]
        },
        {
            // This rule could be incorporated into the next one, but I prefer to be
            // more explicit rather than less
            "name": "Rails/Ruby Haml",
            "extensions": ["haml"],
            "rules": [
                {"file_name": ".*\\.haml$"}
            ]
        },
        {
            // This is an example of using a custom function to decide whether or
            // not to apply this syntax. The source file should be in a plugin folder.
            // "name" is the function name and "source" is the file in which the
            // function is contained. The rule should be specified as such.
            "name": "Rails/Ruby on Rails",
            "rules": [
                {"function": {"name": "is_rails_file", "source": "ApplySyntax/is_rails_file"}}
            ]
        },
        {
            "name": "Ruby/Ruby",
            "extensions": ["thor", "rake", "simplecov", "jbuilder", "rb", "podspec", "rabl"],
            "rules": [
                {"file_name": ".*(\\\\|/)Gemfile$"},
                {"file_name": ".*(\\\\|/)Capfile$"},
                {"file_name": ".*(\\\\|/)Guardfile$"},
                {"file_name": ".*(\\\\|/)[Rr]akefile$"},
                {"file_name": ".*(\\\\|/)Berksfile$"},
                {"file_name": ".*(\\\\|/)Thorfile$"},
                {"file_name": ".*(\\\\|/)Podfile$"},
                {"file_name": ".*(\\\\|/)config.ru$"},
                {"file_name": ".*\\\\Vagrantfile(\\\\..*)?$"},
                {"file_name": ".*/Vagrantfile(/..*)?$"},
                {"file_name": ".*\\.thor$"},
                {"file_name": ".*\\.rake$"},
                {"file_name": ".*\\.simplecov$"},
                {"file_name": ".*\\.jbuilder$"},
                {"file_name": ".*\\.rb$"},
                {"file_name": ".*\\.podspec$"},
                {"file_name": ".*\\.rabl$"},
                // A binary rule does the same thing as a "first_line" rule that uses
                // a regexp to match a shebang, the difference being ApplySyntax
                // will construct the regexp and the user doesn't have to. So
                //
                //      {"binary": "ruby"}
                //
                // is functionally equivalent to
                //
                //      {"first_line": "^#\\!(?:.+)ruby"}
                //
                {"binary": "ruby"}
            ]
        },
        {
            // Emblem syntax matches Ruby Slim
            "name": "Ruby Slim/Syntaxes/Ruby Slim",
            "extensions": ["emblem"],
            "rules": [
                {"file_name": ".*\\.emblem$"}
            ]
        },
        {
            "name": "Blade/Blade",
            "extensions": ["blade.php"],
            "rules": [
                {"file_name": ".*\\.blade.php$"}
            ]
        },
        {
            "name": "PHP/PHP",
            "extensions": ["php3", "php4", "php5", "inc", "phtml"],
            "rules": [
                {"file_name": ".*\\.(php(3|4|5)?|inc|phtml)$"},
                {"first_line": "^<\\?php"}
            ]
        },
        {
            "name": "PHP/Smarty",
            "extensions": ["tpl"],
            "rules": [
                {"file_name": ".*\\.tpl$"}
            ]
        },
        {
            "name": "YAML/YAML",
            "extensions": [".gemrc", "yml", "yml.dist"],
            "rules": [
                {"file_name": ".*\\.gemrc$"},
                {"file_name": ".*\\.yml(\\.dist)?$"}
            ]
        },
        {
            // This rule requires the INI plugin to be installed (via Package Control
            // or https://github.com/clintberry/sublime-text-2-ini)
            "name": "INI/INI",
            //"extensions": [".gitattributes", ".gitconfig", ".gitignore", "ini.dist", ".npmrc"],
            "extensions": ["ini.dist", ".npmrc"],
            "rules": [
                //{"file_name": ".*/git/(attributes|config|ignore)$"},
                //{"file_name": ".*\\\\git\\\\(attributes|config|ignore)$"},
                //{"file_name": ".*\\.(gitattributes|gitconfig|gitignore)$"},
                {"file_name": ".*\\.ini(\\.dist)?$"},
                {"file_name": ".*\\.npmrc$"}
            ]
        },
        {
            "name": "ShellScript/Shell-Unix-Generic",
            "extensions": ["bash", "sh", "zsh"],
            "rules": [
                {"file_name": "profile"},
                {"file_name": ".*\\.bash.*$"},
                {"file_name": ".*\\.z(shrc|shenv|profile|login|logout).*$"},
                {"file_name": ".*\\.(bash|sh|zsh)$"},
                {"binary": "bash"},
                {"binary": "zsh"}
            ]
        },
        {
            // This doesn't really need to be here as Sublime Text identifies
            // Apache files correctly, but I leave it for instructional value
            "name": "Apache/Apache",
            "rules": [
                {"file_name": "^.*(\\.htaccess|\\.htgroups|\\.htpasswd|httpd\\.conf)$"}
            ]
        },
        {
            // Sublime recognizes .py files, but not if they don't have an extension,
            // just a shebang
            "name": "Python/Python",
            "extensions": ["py3", "pyw"],
            "rules": [
                {"file_name": ".*\\.(py|pyw|py3)"},
                {"binary": "python"}
            ]
        }
    ],

    "syntaxes": [
        {
            "name": "ShellScript/Shell-Unix-Generic",
            "extensions": ["git.scmbrc"]
        },
        {
            "name": "Git Config/Git Config",
            "extensions": [".gitconfig", "gitconfig.HOME", ".gitmodules", ".gitattributes"]
        },
        {
            "name": "Git Config/Git Ignore/Git Ignore",
            "extensions": [".gitignore"]
        }
    ]
}
